### **Project Explanation**

#### **1. Overview of the Project:**
The goal of this project is to detect fraudulent transactions using AML and KYC practices. Fraud detection is an essential part of financial institutions like banks, e-commerce, and payment systems to ensure that no illicit transactions occur, such as money laundering or identity theft.

In this project, we:
- **Generate synthetic transactional data** for customers.
- **Apply AML rules** such as detecting large transactions, verifying if the user has completed KYC checks, and identifying suspicious locations.
- **Apply KYC verification** to ensure transactions are from customers who have undergone identity verification.
- **Use a machine learning model** (optional) to classify transactions as fraudulent or legitimate based on various features.

#### **2. Steps Involved in the Project:**

##### **Step 1: Data Simulation (Synthetic Data Creation)**

To simulate real-world data, we create a set of KYC information (e.g., customer details and verification status) and transaction records (e.g., amount, location, and timestamp). 

This will allow us to simulate a real banking or financial environment where transactions are processed, and the system needs to detect suspicious activities.

- **KYC Data** includes:
    - `user_id`: Unique identifier for the customer.
    - `name`: Customer's name.
    - `kyc_verified`: Boolean indicating if the customer has passed KYC verification.
    - `country`: The registered country of the customer.

- **Transaction Data** includes:
    - `user_id`: The ID of the customer who initiated the transaction.
    - `amount`: The transaction amount.
    - `location`: The geographical location from which the transaction originated.
    - `timestamp`: When the transaction occurred.

##### **Step 2: Fraud Detection Rules**

We apply simple fraud detection rules that can easily highlight suspicious activity:
- **Large Transactions**: Transactions that are higher than $3000 are flagged as potentially suspicious.
- **Unverified Users**: If the user has not completed KYC verification, their transactions are flagged as suspicious.
- **Suspicious Locations**: If a transaction occurs from a location that doesn’t match the user’s registered country, it is flagged as suspicious.

##### **Step 3: Fraud Detection Logic**

We then apply these rules to the dataset, creating flags for suspicious activity. If any of the conditions are met (large amount, unverified user, suspicious location), the transaction is flagged as **fraudulent**.

##### **Step 4: Machine Learning Model (Optional)**

For a more advanced approach, we apply a machine learning model like Random Forest to classify transactions as either fraudulent or legitimate. The model learns from the features such as transaction amount, user verification status, and location to predict fraudulence.

---

### **Execution of the Project**

#### **Step 1: Simulating Data**

```python
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Simulating KYC data
kyc_data = {
    'user_id': [101, 102, 103, 104, 105],
    'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'kyc_verified': [True, True, False, True, False],
    'country': ['USA', 'UK', 'USA', 'USA', 'UK']
}

kyc_df = pd.DataFrame(kyc_data)

# Generating synthetic transactions
np.random.seed(0)

def generate_transactions(n):
    transaction_data = []
    for _ in range(n):
        user_id = np.random.choice(kyc_df['user_id'])
        amount = np.random.uniform(50, 5000)
        location = np.random.choice(['USA', 'UK', 'Germany', 'India', 'Canada'])
        timestamp = datetime.now() - timedelta(days=np.random.randint(1, 30))
        
        transaction_data.append({
            'user_id': user_id,
            'amount': amount,
            'location': location,
            'timestamp': timestamp,
        })
    
    return pd.DataFrame(transaction_data)

transactions_df = generate_transactions(1000)

# Merge KYC and transaction data
df = pd.merge(transactions_df, kyc_df, on='user_id', how='left')
print(df.head())
```

#### **Step 2: Fraud Detection**

```python
def detect_fraud(df):
    # Rule 1: Large Transactions (amount > $3000)
    df['large_transaction'] = df['amount'] > 3000
    
    # Rule 2: Unverified Users (no KYC)
    df['unverified_user'] = df['kyc_verified'] == False
    
    # Rule 3: Suspicious Location (transaction location != registered country)
    df['suspicious_location'] = df['location'] != df['country']
    
    # Fraud detection flag: If any rule is True, flag as fraudulent
    df['fraudulent'] = df[['large_transaction', 'unverified_user', 'suspicious_location']].any(axis=1)
    
    return df

fraudulent_df = detect_fraud(df)
print(fraudulent_df[['user_id', 'amount', 'location', 'timestamp', 'fraudulent']].head())
```

#### **Step 3: Machine Learning (Optional)**

```python
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Preprocess data for Machine Learning
fraudulent_df['large_transaction'] = fraudulent_df['large_transaction'].astype(int)
fraudulent_df['unverified_user'] = fraudulent_df['unverified_user'].astype(int)
fraudulent_df['suspicious_location'] = fraudulent_df['suspicious_location'].astype(int)

# Features and target
X = fraudulent_df[['amount', 'large_transaction', 'unverified_user', 'suspicious_location']]
y = fraudulent_df['fraudulent'].astype(int)

# Split into training and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Random Forest model
model = RandomForestClassifier()
model.fit(X_train, y_train)

# Predict on test data
y_pred = model.predict(X_test)

# Evaluate model performance
print(classification_report(y_test, y_pred))
```

---

### **Project Advantages**

1. **Early Detection of Fraudulent Activities**:
   - By detecting suspicious activities such as large transactions, unverified users, and mismatched locations, the system can flag potentially fraudulent transactions before they cause harm.

2. **AML Compliance**:
   - This project incorporates basic Anti-Money Laundering (AML) checks, which are required for compliance in financial institutions.

3. **User Security**:
   - By ensuring that customers are verified through KYC processes, the system minimizes the risks of identity theft and financial fraud.

4. **Data-Driven Fraud Detection**:
   - By using machine learning, the model learns from the data and improves over time, making the fraud detection system smarter and more efficient.

5. **Scalable Approach**:
   - As the volume of transactions increases, the system can scale by integrating more advanced fraud detection techniques (e.g., neural networks, deep learning).

---



